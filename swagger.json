{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Pizza API",
    "description": "PizzaAPI is node.js project. Used Tech: Node.Js | Express.Js | Mongoose - MongoDB SQL | Authorization And Permissions with JWT (Json Web Token) | Password Crypto | Documentation: Swagger/Redoc/Json | Logging",
    "termsOfService": "http://localhost",
    "contact": {
      "name": "DGKN",
      "email": "sakardogukan@gmail.com"
    },
    "license": {
      "name": "BSD license"
    }
  },
  "host": "127.0.0.1:8000",
  "basePath": "/",
  "schemes": [
    "http",
    "https"
  ],
  "securityDefinitions": {
    "JWT": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization",
      "decription": "Entry your AccessToken (JWT) for Login. Example; <b>Bearer <i>...accessToken...<i></b>"
    }
  },
  "paths": {
    "/auth/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Login",
        "description": "Login with username and password",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example": "test1"
                },
                "password": {
                  "type": "string",
                  "example": "1234"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "JWT: Refresh",
        "description": "Refresh accessToken with  ",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "object",
                  "properties": {
                    "refresh": {
                      "type": "string",
                      "example": "...refreshToken..."
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/logout": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "JWT: Logout",
        "description": "No need any doing for logout. You must deleted Bearer Token from your browser.",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/users/": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "List Users",
        "description": "\r  You can send query with endpoint-browser for search[], sort[], page and limit\r  <ul>Examples:\r  <li> URL?<b>search[field1]=value1&search[field2]=value2</b> </li>\r  <li> URL?<b>sort[field1]=1&sort[field2]=-1</b> </li>\r  <li> URL?<b>page=2&limit=2</b> </li>\r  </ul>\r  ",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a User",
        "description": "You can send parameters in body",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example": "test-X"
                },
                "password": {
                  "type": "string",
                  "example": "1234"
                },
                "email": {
                  "type": "string",
                  "example": "test@test.com"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Read a User",
        "description": "\r  A record containing \"UserID\" is called up.\r  <ul> Examples:\r  <li> URL/<b>userId</b></li>\r  </ul>\r  ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update a User",
        "description": "\r  A record containing \"UserID\" is called up. Then, the update is made with the values ​​in the \"body\".\r  <ul> Examples:\r  <li> URL/<b>userId</b></li>\r  </ul>\r  ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example": "test-X"
                },
                "password": {
                  "type": "string",
                  "example": "1234"
                },
                "email": {
                  "type": "string",
                  "example": "test@test.com"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a User",
        "description": "\r  <ul> Examples:\r  <li> URL/<b>userId</b></li>\r  </ul>\r  ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update a User",
        "description": "\r  A record containing \"UserID\" is called up. Then, the update is made with the values ​​in the \"body\".\r  <ul> Examples:\r  <li> URL/<b>userId</b></li>\r  </ul>\r  ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example": "test-X"
                },
                "password": {
                  "type": "string",
                  "example": "1234"
                },
                "email": {
                  "type": "string",
                  "example": "test@test.com"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          }
        }
      }
    },
    "/toppings/": {
      "get": {
        "tags": [
          "Toppings"
        ],
        "summary": "List Toppings",
        "description": "\r  You can send query with endpoint-browser for search[], sort[], page and limit\r  <ul>Examples:\r  <li>URL?<b>search[filed1]=value1&search[field2]=value2</b></li>\r  <li> URL?<b>sort[field1]=1&sort[field2]=-1</b></li>\r  <li> URL?<b>page=2&limit=1</b></li>\r  </ul>\r  ",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Toppings"
        ],
        "summary": "Create a Topping",
        "description": "You can send parameters in body",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "sossis"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/toppings/{id}": {
      "get": {
        "tags": [
          "Toppings"
        ],
        "summary": "Read a Topping",
        "description": "\r  A record containing \"toppingD\" is called up.\r  <ul> Examples:\r  <li> URL/<b>toppingId</b></li>\r  </ul>\r  ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Toppings"
        ],
        "summary": "Update a Topping",
        "description": "\r  <ul> Examples:\r   <li> URL/<b>toppingId</b></li>\r  </ul>\r  ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "sossis"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          }
        }
      },
      "delete": {
        "tags": [
          "Toppings"
        ],
        "summary": "Delete a Topping",
        "description": "\r  <ul> Examples:\r  <li> URL/<b>toppingId</b></li>\r  </ul>\r  ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "tags": [
          "Toppings"
        ],
        "summary": "Update a Topping",
        "description": "\r  <ul> Examples:\r   <li> URL/<b>toppingId</b></li>\r  </ul>\r  ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "sossis"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          }
        }
      }
    },
    "/pizzas/": {
      "get": {
        "tags": [
          "Pizzas"
        ],
        "summary": "List Pizzas",
        "description": "\r  You can send query with endpoint-browser for search[], sort[], page and limit\r  <ul>Examples:\r  <li> URL?<b>search[field1]=value1&search[field2]=value2</b> </li>\r  <li> URL?<b>sort[field1]=1&sort[field2]=-1</b> </li>\r  <li> URL?<b>page=2&limit=2</b> </li>\r  </ul>\r  ",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Pizzas"
        ],
        "summary": "Create a Pizza",
        "description": "You can send parameters in body",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "mixed pizza"
                },
                "price": {
                  "type": "number",
                  "example": 10
                },
                "toppings": {
                  "type": "array",
                  "example": [
                    "...toppingId-1...",
                    "...toppingId-2..."
                  ],
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/pizzas/{id}": {
      "get": {
        "tags": [
          "Pizzas"
        ],
        "summary": "Read a Pizza",
        "description": "\r  A record containing \"pizzaID\" is called up.\r  <ul> Examples:\r  <li> URL/<b>pizzaId</b></li>\r  </ul>\r  ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Pizzas"
        ],
        "summary": "Update a Pizza",
        "description": "\r  A record containing \"PizzaID\" is called up. Then, the update is made with the values ​​in the \"body\".\r  <ul> Examples:\r  <li> URL/<b>pizzaId</b></li>\r  </ul>\r  ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "sossis"
                },
                "price": {
                  "type": "number",
                  "example": 100
                },
                "toppings": {
                  "type": "array",
                  "example": [
                    "...toppingId-1...",
                    "...toppingId-2..."
                  ],
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          }
        }
      },
      "delete": {
        "tags": [
          "Pizzas"
        ],
        "summary": "Delete a Pizza",
        "description": "\r  <ul> Examples:\r  <li> URL/<b>pizzaId</b></li>\r  </ul>\r  ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "tags": [
          "Pizzas"
        ],
        "summary": "Update a Pizza",
        "description": "\r  A record containing \"PizzaID\" is called up. Then, the update is made with the values ​​in the \"body\".\r  <ul> Examples:\r  <li> URL/<b>pizzaId</b></li>\r  </ul>\r  ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "sossis"
                },
                "price": {
                  "type": "number",
                  "example": 100
                },
                "toppings": {
                  "type": "array",
                  "example": [
                    "...toppingId-1...",
                    "...toppingId-2..."
                  ],
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          }
        }
      }
    },
    "/pizzas/{id}/pushToppings": {
      "put": {
        "tags": [
          "Pizzas"
        ],
        "summary": "Toppings Add",
        "description": "\r  In order to add sauce by calling the pizza record named \"pizzaID\", \"toppingId\" must be entered in the \"req.body\" field. With Put Method.\r  <ul> Examples:\r  <li> URL/<b>pizzaId</b>/<b>pushToppings</b></li>\r  </ul>\r  ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "toppings": {
                  "type": "string",
                  "example": "...toppingId..."
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          }
        }
      }
    },
    "/pizzas/{id}/pullToppings": {
      "put": {
        "tags": [
          "Pizzas"
        ],
        "summary": "Toppings Remove",
        "description": "\r  In order to remove sauce by calling the pizza record named \"pizzaID\", \"toppingId\" must be entered in the \"req.body\" field. With Put Method.\r  <ul> Examples:\r  <li> URL/<b>pizzaId</b>/<b>pullToppings</b></li>\r  </ul>\r  ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "toppings": {
                  "type": "string",
                  "example": "...toppingId..."
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          }
        }
      }
    },
    "/orders/": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "List Orders",
        "description": "\r  You can send query with endpoint-browser for search[], sort[], page and limit\r  <ul>Examples:\r  <li> URL?<b>search[field1]=value1&search[field2]=value2</b> </li>\r  <li> URL?<b>sort[field1]=1&sort[field2]=-1</b> </li>\r  <li> URL?<b>page=2&limit=2</b> </li>\r  </ul>\r  ",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Create a Order",
        "description": "You can send parameters in body",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "...userId..."
                },
                "pizzaId": {
                  "type": "string",
                  "example": "...pizzaId..."
                },
                "size": {
                  "type": "string",
                  "example": "Small"
                },
                "quantitiy": {
                  "type": "number",
                  "example": 2
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/orders/{id}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Read a Order",
        "description": "\r  A record containing \"OrderID\" is called up.\r  <ul> Examples:\r  <li> URL/<b>orderId</b></li>\r  </ul>\r  ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Orders"
        ],
        "summary": "Update a Order",
        "description": "\r  A record containing \"OrderID\" is called up. Then, the update is made with the values ​​in the \"body\".\r  <ul> Examples:\r  <li> URL/<b>orderId</b></li>\r  </ul>\r  ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "...userId..."
                },
                "pizzaId": {
                  "type": "string",
                  "example": "...pizzaId..."
                },
                "size": {
                  "type": "string",
                  "example": "Small"
                },
                "quantitiy": {
                  "type": "number",
                  "example": 2
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          }
        }
      },
      "delete": {
        "tags": [
          "Orders"
        ],
        "summary": "Delete a Order",
        "description": "\r  <ul> Examples:\r   <li> URL/<b>orderId</b></li>\r  </ul>\r  ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "tags": [
          "Orders"
        ],
        "summary": "Update a Order",
        "description": "\r  A record containing \"OrderID\" is called up. Then, the update is made with the values ​​in the \"body\".\r  <ul> Examples:\r  <li> URL/<b>orderId</b></li>\r  </ul>\r  ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "...userId..."
                },
                "pizzaId": {
                  "type": "string",
                  "example": "...pizzaId..."
                },
                "size": {
                  "type": "string",
                  "example": "Small"
                },
                "quantitiy": {
                  "type": "number",
                  "example": 2
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          }
        }
      }
    }
  },
  "definitions": {
    "auth/login": {
      "type": "object",
      "properties": {
        "username": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "example": "String"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "password": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "example": "String"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        }
      }
    },
    "auth/refresh": {
      "type": "object",
      "properties": {
        "tokenRefresh": {
          "type": "object",
          "properties": {
            "desription": {
              "type": "string",
              "example": "token: {refresh: ... }"
            },
            "type": {
              "type": "string",
              "example": "String"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "JWT": true
    }
  ]
}